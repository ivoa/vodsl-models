
model meas (2.0) "This model defines objects and datatypes which represent 'measured' or 'determined' data.  It associates a Coordinate (ie: the determined value with associated physical context) with corresponding Error(s).  As such, this model is at least the foundation for representing the vast majority of the Astronomical data found in catalogs and data products.  

We define here, several specialized classes which cover the most basic and common types, such as Position and Time.  We also provide a generic model which can accommodate virtually any data, but may require a bit more effort to fully describe the coordinate metadata.  Additional specializations, e.g. Flux, Magnitude, Luminosity, Pressure, Temperature, etc. may be added to this model, or in other models focusing on particular domains or use cases.

We include a fairly simple Error model, describing errors as a 'shape' of uncertainty, and define a small set of commonly occuring forms (e.g. Symmetrical, Bounds, Ellipsoid). 
"
     
 author "Arnold Rots, Mark Cresitello-Dittmar, Omar Laurino"
       include "IVOA-v1.0.vodsl"
     
       include "STC_coords-v1.0.vodsl"
     
abstract dtype Uncertainty  "Abstract head of uncertainty types.  These classes define the shape of the uncertainty, and are designed to be reusable in different contexts.  Uncertainties are designed to be associated with a Coordinate or other object which provides the 'center' or reference location about which the uncertainty resides.  In this model, we use them in the context of defining measurement errors, but they are also compatible for use in defining resolutions which are to be modeled at a later date.

This initial version of teh model forms a fundamental basis which can then be expanded to include more complex and varied use cases as they present themselves.  The current model assumes Gaussian distributions with shpes defined at the 68% confidence level.
"
  {   
  }

dtype Symmetrical  -> Uncertainty "Symmetrical uncertainty, constant in all dimensions and directions from the associated Coordinate.  ie: PlusMinus in 1D, circular in 2D, spherical in 3D."
  {   
        radius: ivoa:RealQuantity   "The uncertainty extent, constant in all dimensions and directions.";
  }

dtype Asymmetrical1D  -> Uncertainty "Uncertainty with different extent in the positive and negative directions from the associated Coordinate."
  {   
        plus: ivoa:RealQuantity   "Extent in the positive axis direction.";
        minus: ivoa:RealQuantity   "Extent in the negative axis direction.";
  }

dtype Asymmetrical2D  -> Uncertainty "2D Uncertainty with different extent in the positive and negative axis directions from the associated Coordinate.  i.e.: an offset rectangle."
  {   
        plus: ivoa:RealQuantity @[2..2]  "Extent in each positive axis direction.";
        minus: ivoa:RealQuantity @[2..2]  "Extent in each negative axis direction.";
  }

dtype Asymmetrical3D  -> Uncertainty "3D Uncertainty with different extent in the positive and negative axis directions from the associated Coordinate.  i.e.: an offset box."
  {   
        plus: ivoa:RealQuantity @[3..3]  "Extent in each positive axis direction.";
        minus: ivoa:RealQuantity @[3..3]  "Extent in each negative axis direction.";
  }

dtype Bounds1D  -> Uncertainty "Provide the edges of the uncertainty space.  Rather than being relative to the associated Coordinate, these represent a range within that Coordinate space."
  {   
        loLimit: ivoa:RealQuantity   "Lower limit of the uncertainty range.";
        hiLimit: ivoa:RealQuantity   "Upper limit of the uncertainty range.";
  }

dtype Bounds2D  -> Uncertainty "Provide the edges of a 2D uncertainty space.  Rather than being relative to the associated Coordinate, these represent ranges along each axis of that Coordinate space."
  {   
        loLimit: ivoa:RealQuantity @[2..2]  "Lower edges of the uncertainty rectangle.";
        hiLimit: ivoa:RealQuantity @[2..2]  "Upper edges of the uncertainty rectangle.";
  }

dtype Bounds3D  -> Uncertainty "Provide the edges of a 3D uncertainty space.  Rather than being relative to the associated Coordinate, these represent ranges along each axis of that Coordinate space."
  {   
        loLimit: ivoa:RealQuantity @[3..3]  "Lower edges of the uncertainty box.";
        hiLimit: ivoa:RealQuantity @[3..3]  "Upper edges of the uncertainty box.";
  }

dtype Ellipse  -> Uncertainty "Elliptical uncertainty shape."
  {   
        semiAxis: ivoa:RealQuantity @[2..2]  "Extent of the semi-major and semi-minor axes, provided in the order of the associated Coordinate axes.";
        posAngle: ivoa:RealQuantity   "Position angle, counter-clockwise from the positive direction of the first axis of the associated Coordinate.  When used in the spatial domain, the expectation is that the 'first axis' corresponds to the 'North Celestial Pole', and the second to 'East', thereby conforming to the IAU definition of the position angle direction being 'East of North'.
";
  }

dtype Ellipsoid  -> Uncertainty "Ellipsoidal uncertainty shape."
  {   
        semiAxis: ivoa:RealQuantity @[3..3]  "Extent of the semi axes, provided in the order of the associated Coordinate axes.";
        posAngle: ivoa:RealQuantity @[2..2]  "Position angles 
  * counter-clockwise from the positive direction of the first axis toward the second axis
  * angle 'above' the plane of the first two axes of the associated Coordinate.  
When used in the spatial domain, the expectation is that the 'first axis' corresponds to the 'North Celestial Pole', and the second to 'East', thereby conforming to the IAU definition of the position angle direction being 'East of North'.";
  }

abstract otype Measure  "Abstract base of Measure classes, associates a 'determined value' (Coordinate) with corresponding errors.

We associate the Error(s) with the full Measure, rather than the individual values, in order to support both correlated and uncorrelated errors.  In many cases with multi-dimensional data, the associated errors are correlated and must be considered with the value set as a whole.  One consequence of this approach is that there is a looser association between the Error dimensions and the corresponding value dimension.  We require that the Error content MUST be compatible with the value dimension and nature (e.g. dimension, domain, units, etc).

"
  {   
        error : Error @?  as composition "Measurement error.";
  }

otype Error  "The Error class uses the Uncertainty types to describe measurement errors from various sources."
  {   
        statError: Uncertainty  @?   "Statistical error.  The Uncertainty type MUST be dimensionally compatible with the associated Measure value.";
        sysError: Uncertainty  @?   "Systematic error.  The Uncertainty type MUST be dimensionally compatible with the associated Measure value.";
  }

otype GenericMeasure  -> Measure "The most generic Measure class.  This class may be used to represent data not covered by the specialized cases."
  {   
        coord: coords:PhysicalCoordinate   "The measured coordinate value.";
  }

otype Position  -> Measure "Provides a complete description of a measured positional instant."
  {   
        coord: coords:Point   "The measured Position value.  The Point coordinate supports 1,2, and 3-dimensional cases.  Details of the coordinate system (space and frame), are associated with the Point.";
  }

otype Time  -> Measure "Provides a complete description of a measured Temporal instant."
  {   
        coord: coords:TimeStamp   "The measured time value.  May be provided in any of the TimeStamp subtypes.";
  }

otype Polarization  -> Measure "Provides a complete description of a determined polarization state.  Since the polarization coordinate is an enumerated type, there can be no associated numerical error sources."
  {   
        coord: coords:PolCoordinate   "Determined polarization state.  May be provided by any of the PolCoordValue subtypes.";
  }

otype Velocity  -> Measure "Provides a comple description of a measured Velocity instant."
  {   
        coord: coords:Point   "The measured Velocity value.  The Point coordinate supports 1,2, and 3-dimensional cases.  Details of the coordinate system (space and frame), are associated with the Point.";
  }

otype ProperMotion  -> Measure "Proper motion represented as the velocity in Longitude and Latitude directions of a spherical coordinate space.  The associated SpaceFrame provides the details regarding the nature of the coordinate space (eg: Equatorial, Galactic, etc)."
  {   
        lon: coords:PhysicalCoordinate   "Velocity in angular distance per unit time along the Longitude axis.  It is common, though not universal, practice to quote longitudinal proper motion pre-multiplied by cos(lat) so that the magnitude of the quantity is not affected by its longitudinal position.  We do not constrain this value to one form or the other in this model, leaving it to be specified by the particular usage thread.";
        lat: coords:PhysicalCoordinate   "Velocity in angular distance per unit time along the Latitude axis.";
  }
