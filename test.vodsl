model testingscope ( 1.0 ) "Testing the scope of types"
author "tbd"
include "IVOA.vodsl"
    primitive Identity "overriding the ivoa type"
	primitive real "floating point number at top level in this model"

package topl "top level package"
{
		dtype fq -> ivoa:quantity.AtomicValue {
		value : real "a new float";
		value2 : ivoa:real "ivoa float - fully qualified"; 
		}
		primitive primtop "a test primitive"

		package p1
		{
				dtype scopes {
					f0 : real "from the uppermost level in the namespace";
					f1 : primtop "in scope without qualification as nested";
					f2 : ivoa:quantity.IntegerQuantity "an example from included sub namespace";
					f3 : ivoa:Identity "from the imported ivoa namespace";
					f3b: Identity "from local definition";
					f4 : daft "not a proper type anywhere - should be an error";
					f5 : ivoa:quantity.AtomicValue "this is an abstract type";
					f6 : sprim "should be an error as needs a package reference";
					f7 : topl.p2.sprim  "this is how it should be referred to";
					f8 : obscore:Access "should not be in scope (not imported)";
				}
				otype multiplicities "the @ sign is not really syntactically necessary"
			{
				m1 : ivoa:integer @? "0 or 1";
				m2 : ivoa:integer @* "0 or many ** not advised for attribute";
				m3 : ivoa:integer @+ "1 or many ** not advised for attribute";
				m4 : ivoa:integer @[2] "two (as an array?)";
				m5 : ivoa:integer @[2 .. 2] "any semantic difference to above? perhaps indicates not implemented as array?";
				m6 : ivoa:integer @[3 .. 2] "should be an error for anything";
				
			}

				otype osample ""
			{
				i: ivoa:integer "";
				f:real  "";
			}

				dtype dsample "" {
					i: ivoa:integer "";
					f: real "";
				}

				dtype derived -> ivoa:quantity.AtomicValue {
					d1 : ivoa:integer "";
					s1 : scopes "in same package - does not need qualification";
				}

				dtype derived2 -> scopes "in same package - does not need qualification" {
				}

				dtype badderivation ->  topl.p1.multiplicities "this should be an error extending wrong type - is not suggested by auto completion, however error message says type not found rather than wrong type" {
				}

				dtype badderivation2 -> osample "deriving from otype - again poor message - though auto-complete only suggests correct types" {
				}

				dtype derived3 -> topl.p1.derived2 /*note that a fully qualified name is ok */ "references to self in attributes" {
					d1: derived3 "is this allowable not specifically as a reference?";
					d2 references  osample "this should be ok" ;
					d3 references  dsample "this should be error" ;
				}
				otype refers
			{
				r1 references /*complete syntax error here */;
			}
		}

		package p2 "nested at the same level as p1 "
		{
				primitive sprim "another primitive"
		}
}