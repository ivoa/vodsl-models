
model stc (1.0) "This is the data model for describing Arnold Rots' STC world."
     
       include "IVOA-v1.0.vodsl"
     
    primitive coordEquinoxType  "Coordinate equinox: B{year} or J{year} with at least one decimal; do not use in conjunction with ICRS
String with value restriction:
[BJ]\-?\d?\d?\d?\d\d\d\d\.\d\d?\d?"
enum CoordFlavor  ""
{
SPHERICAL  "Spherical 2-D (longitude, latitude) or 3-D (long, lat, radius/elevation) coordinates",
CARTESIAN  "Cartesian 1-, 2-, or 3-D coordinates",
UNITSPHERE  "-D Unit sphere coordinates (direction cosines); in (long,lat), X is in the direction (0,0), Y (pi/2,0), Z (0,pi/2)",
POLAR  "2-D polar coordinates (radius, posangle)",
CYLINDRICAL  "3-D cylindrical coordinates (radius, posangle, z)",
STRING  "String coordinates (e.g., Stokes)",
HEALPIX  "2-D Healpix coordinates; defaults for H(4) and K(3)"
}

enum ReferencePosition  "Created to support all the various substitution groups for ReferencePosition"
{
TOPOCENTER  "Location of the observer/telescope",
BARYCENTER  "Barycenter of the solar system",
HELIOCENTER  "Center of the sun",
GEOCENTER  "Center of the earth",
LSR  "(Kinematic) Local Standard of Rest (only used for Doppler velocities); equivalent to LSRK",
LSRK  "Kinematic Local Standard of Rest (only used for Doppler velocities); equivalent to LSR",
LSRD  "Dynamic Local Standard of Rest (only used for Doppler velocities)",
GALACTIC_CENTER  "Center of the Galaxy",
LOCAL_GROUP_CENTER  "Center of the Local Group",
MOON  "Center of the Moon",
EMBARYCENTER  "Barycenter of the Earth-Moon system",
MERCURY  "Center of Mercury",
VENUS  "",
MARS  "",
JUPITER  "",
SATURN  "",
URANUS  "",
NEPTUNE  "",
PLUTO  "",
RELOCATABLE  "A relocatable origin, especially useful for simulations.

NB How should this be used?",
UNKNOWNRefPos  "Unknown origin; the client is responsible for assigning a default"
}

enum SpaceRefFrame  "Represents the substitution group SpaceRefFrame"
{
ICRS  "",
FK4  "",
FK5  "",
ECLIPTIC  "",
GALACTIC_I  "",
GALACTIC_II  "",
SUPER_GALACTIC  "",
AZ_EL  "",
BODY  "",
GEO_C  "",
GEO_D  "",
MAG  "",
GSE  "",
GSM  "",
SM  "",
HGC  "",
HGS  "",
HPC  "",
HPR  "",
HEE  "",
HEEQ  "",
HGI  "",
HRTN  "",
MERCURY_C  "",
VENUX_C  "",
LUNA_C  "",
MARS_C  "",
JUPITER_C_III  "",
SATURN_C_III  "",
URANUS_C_III  "",
NEPTUNE_C_III  "",
PLUTO_C  "",
MERCURY_G  "",
VENUS_G  "",
LUNA_G  "",
MARS_G  "",
JUPITER_G_III  "",
SATURN_G_III  "",
URANUS_G_III  "",
NEPTUNE_G_III  "",
PLUTO_G  "",
UNKNOWNFrane  ""
}

enum angleUnitType  ""
{
deg  "",
rad  "",
h  "",
arcmin  "",
arcsec  ""
}

enum coord_naxes  ""
{
1  "",
2  "",
3  ""
}

enum dopplerDefinitionType  "The Doppler definition used: optical, radio, or pseudo-relativistic (i.e., how is a redshift converted to a velocity); the most common is optical, except when the reference is LSR (usually radio)"
{
OPTICAL  "",
RADIO  "",
RELATIVISTIC  ""
}

enum handedness  ""
{
left  "",
right  ""
}

enum planetaryEphemType  "If solar system positions are implied anywhere, the planetary ephemeris to be used needs to be provided - usually JPL-DE405 with ICRS and JPL-DE200 with FK5"
{
JPL-DE200  "",
JPL-DE405  ""
}

enum posAngleReferenceType  "Position angles may be counted from North (through East), (positive) X (to positive Y), or (positive) Y (to positive X) axis"
{
North  "",
X  "",
Y  ""
}

enum posUnitType  ""
{
deg  "",
deg deg m  "",
deg deg Mpc  "",
rad  "",
h  "",
arcmin  "",
arcsec  "",
m  "",
km  "",
mm  "",
AU  "",
pc  "",
kpc  "",
Mpc  "",
lyr  "",
unnamed  ""
}

enum projectionType  "The spherical-to-cartesian or cartesian-to-cartesian projection to be used; c-to-c projections are marked as such, all others are to be interpreted as s-to-c"
{
LOG  "Linear-to-logarithmic cartesian-to-cartesian projection",
TAN  "Tangent plane projection",
SIN  "Sine projection",
STG  "Stereographic projection",
ARC  "Zenithal equidistant projection",
ZEA  "Zenithal equal-area projection",
AIR  "Airy projection",
CEA  "Cylindrical equal-area projection",
CAR  "Plate Carree projection",
MER  "Mercator projection",
SFL  "Sanson-Flamsteed projection",
PAR  "Parabolic projection",
MOL  "Mollweide projection",
AIT  "Hammer-Aitoff projection",
COE  "Conic equal-area projection",
COD  "Conic equidistant projection",
COO  "Conic orthomorphic projection",
BON  "Bonne equal-area projection",
PCO  "Polyconic projection",
TSC  "Tangential spherical cube projection",
CSC  "COBE quadrilateralized spherical cube projection",
QSC  "Quadrilateralized spherical cube projection"
}

enum redshiftFrameValue  ""
{
VELOCITY  "",
REDSHIFT  ""
}

enum relocatableOriginTime  ""
{
RELOCATABLE  ""
}

enum spectralUnitType  ""
{
Hz  "",
kHz  "",
MHz  "",
GHz  "",
m  "",
mm  "",
um  "",
nm  "",
Angstrom  "",
eV  "",
keV  "",
MeV  "",
GeV  "",
TeV  ""
}

enum timeScaleType  ""
{
TT  "Terrestrial Time; the basis for ephemerides",
TDT  "Obsolete synonym for TT",
ET  "Ephemeris Time; predecessor of, and continuous with, TT",
TDB  "Barycentric Dynamic Time:the independent variable in planetay ephemerides; time at the solar system barycenter synchronous with TT on an annual basis; sometimes called TEB",
TEB  "Barycentric Ephemeris Time: time at the solar system barycenter synchronous with TT on an annual basis; a deprecated synonym of TDB",
TCG  "",
TCB  "",
TAI  "",
IAT  "",
UTC  "",
GPS  "Global Positioning System's time scale; runs 19 s behind TAI, 51.184 s behind TT",
LST  "Local Siderial Time; only for ground-based observations; note that the second is shorter",
GMST  "Greenwich Mean Siderial Time; only for ground-based observations; note that the second is shorter",
LOCAL  "Only to be used for simulations in conjunction with a relocatable spatial frame"
}

enum timeUnitType  "Time units may be second (s), hour (h: 3600 s), day (d: 86400 s), Julian year (a, yr: 365.25 d), Julian century (cy: 36525 d), or empty (i.e., dimensionless) for ISO-8601 format"
{
s  "",
h  "",
d  "",
a  "",
yr  "",
cy  "",
unnamed  ""
}

enum velTimeUnitType  "Velocity units are a posUnitType / velTimeType; the latter may be second, day, hour, year (a or yr), century, but not empty"
{
s  "",
h  "",
d  "",
a  "",
yr  "",
cy  ""
}

abstract dtype AbsoluteTimeType  ""
  {   
  }

dtype STCReference  "These four attributes represent the standard IVOA referencing system: internal (within the document) referencing through 'id' and 'idref', external referencing through Xlink, using only 'type=simple' and 'href'.These four attributes represent the standard IVOA referencing system: internal (within the document) referencing through 'id' and 'idref', external referencing through Xlink, using only 'type=simple' and 'href'.

The attributes ID_type and IDREF_type allow the author to list attributes of type ID, respectively IDREF, enabling readers to identify these attributes without having to refer to the schema. This is important in cases where documents are concatenated (e.g., in registries), raising the potential for non-unique IDs. The value of these attributes is a string of comma-separated attribute names."
  {   
        id: ivoa:string  @?   "";
        idref: ivoa:string  @?   "";
        ucd: ivoa:string  @?   "";
        href: ivoa:anyURI  @?   "Mapping of the xlink:href attribute. note, xlkink:type is not mapped as it is a constant, 'simple'.";
        ID_TYPE: ivoa:string  @?   "";
        IDREF_type: ivoa:string  @?   "";
  }

dtype astroCoordsFileType  -> coordinateType "Coordinate references to a specific FITS file

TBD Due to choice to define FITSFile references as classes, I use attributes rather than references.
This seems to define the way by which coordinates can/must be associated to tables in FITS files.
Could be a referencable object on its own. Would have a name attribute and an STCReference"
  {   
        FITSFile  references fitsType "";
        FITSTime  @?  references coordFITSColumnsType "";
        FITSPosition  @?  references coordFITSColumnsType "";
        FITSVelocity  @?  references coordFITSColumnsType "";
        FITSSpectral  @?  references coordFITSColumnsType "";
        FITSRedshift  @?  references coordFITSColumnsType "";
  }

dtype astroCoordsType  -> coordsType ""
  {   
        Time: timeCoordinateType  @?   "";
        Position: posVector2CoordinateType  @?   "";
        Velocity: velVector2CoordinateType  @?   "";
        Spectral: spectralCoordinateType  @?   "";
        Redshift: redshiftCoordinateType  @?   "";
        CoordFile: astroCoordsFileType  @?   "";
        Orbit: orbitType  @?   "";
  }

dtype astronTimeType  "astronTime is the generalized astronomical time type and consists of one, two, or three elements: optional TimeScale, optional relative time offset, and an absolute time (ISO8601 or a decimal JD or MJD; or it may be an IDREF to one of those three); TimeScale may be omitted only if the element is part of AstroCoords, referring to an AstroCoordSystem that specifies a TimeScale

TBD I suggest this type is to be used as a pattern rather than a reusable type."
  {   
        Timescale: timeScaleType  @?   "";
        TimeOffset: timeOffsetType  @?   "";
        AbsoluteTime: AbsoluteTimeType   "";
  }

dtype basicCoordinateType  -> coordinateType "Basic scalar coordinate type
Single Error, Resolution, Size, PixSize elements indicate definite values; pairs indicate ranges"
  {   
        Value: double1Type  @?   "mapping of element ref='Value'";
        Error: double1Type @[0..2]  "";
        Resolution: double1Type @[0..2]  "";
        Size: double1Type @[0..2]  "";
        PixSize: double1Type @[0..2]  "";
  }

dtype coordFlavorType  "Provides the spatial coordinate definitions: number of axes, SPHERICAL, CARTESIAN, UNITSPHERE, POLAR, or HEALPIX, presence of velocities"
  {   
        flavor: CoordFlavor   "This attribute maps the substitution group usage where STC by the name of an element can indicate the flavor.
We use an explicit attribute for this.";
        coord_naxes: coord_naxes   "";
        handedness: handedness  @?   "";
  }

dtype coordIntervalType  -> stcBaseType ""
  {   
        lo_include: ivoa:boolean   "";
        hi_include: ivoa:boolean  @?   "";
        fill_factor: ivoa:real  @?   "";
        frame_id  @?  references coordFrameType "";
  }

dtype coordValueType  "A type that just holds a 1-3D coordinate value; see comment in the CoordValue head element.

NB
From STC schema it seems as if every type of value"
  {   
        customValue: ivoa:string   "Using string for anyType";
        value1D: double1Type  @?   "";
        value2D: double2Type  @?   "";
        value3D: double3Type  @?   "";
  }

dtype coordinateType  -> stcBaseType "Abstract coordinate type; a concrete Coordinate consists of a Value, Error, Resolution, Size, and PixSize"
  {   
        name: ivoa:string  @?   "";
        coord_frame_id  @?  references coordFrameType "";
  }

dtype coordsType  -> stcBaseType ""
  {   
        GenCoordinate: coordinateType  @*   "";
  }

dtype curve2Type  -> stcBaseType "A curve in 2-D space, defined by its end points and a shape attribute (default: line or great circle)</"
  {   
        P1: double2Type  @?   "";
        P2: double2Type  @?   "";
        curve_shape: ivoa:string  @?   "";
  }

dtype curve3Type  -> stcBaseType "A curve in 3-D space, defined by its end points and a shape attribute (default: line or great circle)"
  {   
        P1: double3Type  @?   "";
        P2: double3Type  @?   "";
        curve_shape: ivoa:string  @?   "";
  }

dtype customRefPosType  -> referencePositionType ""
  {   
        Coordinate: coordinateType   "";
  }

dtype double1Type  "A double with referencing and units attributes

Mapping of the double1Type.
NB can also be used as type for attributes defined from a ref to root elements of this type. E.g. Value."
  {   
        value: ivoa:real   "Mapping of the extension of this type of the xsd:double.
We do not inherit from primitives, instead add a value attribute of the corresponding type.";
        timeUnit: timeUnitType  @?   "";
        pos_unit: posUnitType  @?   "";
        pos_angle_unit: angleUnitType  @?   "";
        vel_time_unit: velTimeUnitType  @?   "";
        spectral_unit: spectralUnitType  @?   "";
        gen_unit: ivoa:string  @?   "";
  }

dtype double1TypeWithUnit  ""
  {   
        value: double1Type   "";
        unit: posUnitType  @?   "";
  }

dtype double2Type  -> stcBaseType "A vector of 2 doubles; components are now separated"
  {   
        C1: double1Type  @?   "";
        C2: double1Type  @?   "";
        unit: posUnitType  @?   "";
        vel_time_unit: velTimeUnitType  @?   "";
        gen_unit: ivoa:string  @?   "";
  }

dtype double3Type  -> stcBaseType "A vector of 3 doubles with separated components"
  {   
        C1: double1Type  @?   "";
        C2: double1Type  @?   "";
        C3: double1Type  @?   "";
        unit: posUnitType  @?   "";
        vel_time_unit: velTimeUnitType  @?   "";
        gen_unit: ivoa:string  @?   "";
  }

dtype double4Type  -> stcBaseType "A vector of 4 doubles (2x2 matrix)"
  {   
        M11: double1Type  @?   "";
        M12: double1Type  @?   "";
        M21: double1Type  @?   "";
        M22: double1Type  @?   "";
        unit: posUnitType  @?   "";
        vel_time_unit: velTimeUnitType  @?   "";
        gen_unit: ivoa:string  @?   "";
  }

dtype double9Type  -> stcBaseType "A vector of 9 doubles (3x3 matrix)"
  {   
        M11: double1Type  @?   "";
        M12: double1Type  @?   "";
        M13: double1Type  @?   "";
        M21: double1Type  @?   "";
        M22: double1Type  @?   "";
        M23: double1Type  @?   "";
        M31: double1Type  @?   "";
        M32: double1Type  @?   "";
        M33: double1Type  @?   "";
        unit: posUnitType  @?   "";
        vel_time_unit: velTimeUnitType  @?   "";
        gen_unit: ivoa:string  @?   "";
  }

dtype genVector2CoordinateType  -> vector2CoordinateType "Generic 2-D coordinate type
Single CError2, CResolution2, CSize2, CPixSize2 elements indicate definite values; pairs indicate ranges"
  {   
        unit: ivoa:string  @?   "";
        coord_system_id  @?  references coordSysType "";
  }

dtype genVector3CoordinateType  -> vector3CoordinateType "Generic 3-D coordinate type
Single CError3, CResolution3, CSize3, CPixSize3 elements indicate definite values; pairs indicate ranges"
  {   
        unit: ivoa:string  @?   "";
  }

dtype genericRefPosType  -> referencePositionType "Type for custom positions: specifies reference origin"
  {   
        GenCoordinate: coordinateType  @?   "";
  }

dtype healpixType  -> coordFlavorType "2-D Healpix coordinates; defaults for H(4) and K(3)"
  {   
        healpix_H: ivoa:nonnegativeInteger   "";
        healpix_K: ivoa:nonnegativeInteger   "";
  }

dtype isoTimeType  -> AbsoluteTimeType "ISO8601 time; note: only a limited subset of ISO 8601 is allowed: yyyy-mm-ddThh:mm:ss.sss...; unfortunately, XSchema does not allow hh, mm, or ss to be optional, '.ss' is

"
  {   
        value: ivoa:datetime   "";
        STCReference: STCReference  @?   "";
  }

dtype jdTimeType  -> AbsoluteTimeType "A decimal type for JD and MJD, with optional referencing"
  {   
        value: ivoa:decimal   "";
        STCReference: STCReference  @?   "";
  }

dtype orbitType  -> coordinateType "Orbit defined by six orbital elements and optional mean anomaly and period; note that the epoch of periapsis or of mean anomaly is provided by T, however, an coordinate epoch should be provided by paring this element with a time instant element"
  {   
        a: double1TypeWithUnit  @?   "Semi-major axis for elliptical (closed) orbits (1>e>=0) only; for parabolic or hyperbolic orbits us periapsis distance q";
        q: double1TypeWithUnit  @?   "Periapsis distance; required (instead of a) for open orbits (e>=1)";
        e: double1Type  @?   "Eccentricity";
        i: double1TypeWithUnit  @?   "Inclination";
        Node: double1TypeWithUnit  @?   "Longitude of ascending node";
        Aop: double1TypeWithUnit  @?   "Argument of periapsis";
        M: double1TypeWithUnit  @?   "Mean anomaly at time T; if absent T will refer to pericenter";
        P: double1TypeWithUnit  @?   "Orbital period (redundant); for closed orbits only";
        T: astronTimeType   "Epoch of M (mean anomaly, if present) or of periapsis (if M is absent";
  }

dtype pixelCoordsType  -> coordsType ""
  {   
        Pixel: coordinateType  @*   "";
  }

dtype pixelVector1CoordinateType  -> coordinateType "Scalar pixel coordinate type"
  {   
        Value: double1Type  @?   "mapping of the element ref='Value'";
  }

dtype pixelVector2CoordinateType  -> coordinateType "2-D pixel coordinate type"
  {   
        Name1: ivoa:string  @?   "";
        Name2: ivoa:string  @?   "";
        Value2: double2Type  @?   "";
  }

dtype pixelVector3CoordinateType  -> coordinateType "3-D pixel coordinate type"
  {   
        Name1: ivoa:string  @?   "";
        Name2: ivoa:string  @?   "";
        Name3: ivoa:string  @?   "";
        Value3: double3Type  @?   "";
  }

dtype posAngleType  ""
  {   
        value: ivoa:real   "";
        unit: angleUnitType   "";
        reference: posAngleReferenceType   "";
        STReference: STCReference   "";
  }

dtype posVector1CoordinateType  -> basicCoordinateType ""
  {   
        unit: posUnitType  @?   "";
        coord_system_id  @?  references coordSysType "";
  }

dtype posVector2CoordinateType  -> vector2CoordinateType "Position 2-D coordinate type
Single CError2, CResolution2, CSize2, CPixSize2 elements indicate definite values; pairs indicate ranges"
  {   
        unit: posUnitType  @?   "";
        coord_system_id  @?  references coordSysType "";
  }

dtype posVector3CoordinateType  -> vector3CoordinateType ""
  {   
        unit: posUnitType  @?   "";
        coord_system_id  @?  references coordSysType "";
  }

dtype redshiftCoordinateType  -> basicCoordinateType ""
  {   
        unit: posUnitType  @?   "";
        vel_unit_type: velTimeUnitType  @?   "";
        coord_system_id  @?  references coordSysType "";
  }

abstract dtype referencePositionType  "Abstract type for reference positions"
  {   
        ReferencePosition: ReferencePosition   "";
  }

dtype regionAreaType  "Element to hold the area of a Region, once calculated; the element holds the actual area, linearAreaUnit the linear units of the of the area (i.e., it should be squared to get the proper units of the area), and validArea indicates whether the area has been calculated properly"
  {   
        area: ivoa:real   "";
        linearAreaUnit: posUnitType   "";
        validArea: ivoa:boolean   "";
  }

dtype relocatableOriginType  -> AbsoluteTimeType ""
  {   
        value: relocatableOriginTime   "";
  }

dtype scalarCoordinateType  -> basicCoordinateType "Generic scalar coordinate type: a basic scalar coordinate with units"
  {   
        unit: ivoa:string  @?   "";
  }

dtype size2DType  ""
  {   
        radius: double1Type  @?   "";
        Size2: size2Type  @?   "";
        sizeMatrix: double4Type  @?   "";
        sizeRegion: ivoa:string  @?   "";
  }

dtype size2Type  -> double2Type ""
  {   
        PosAngle: posAngleType  @?   "Consists of a Size (2 doubles) and optional position angle element";
  }

dtype size3DType  ""
  {   
        radius: double1Type  @?   "";
        Size3: size3Type  @?   "";
        sizeMatrix: double9Type  @?   "";
        sizeRegion: ivoa:string  @?   "";
  }

dtype size3Type  -> double2Type ""
  {   
        PosAngle1: posAngleType  @?   "Consists of a Size (2 doubles) and optional position angle element";
        PosAngle2: posAngleType  @?   "Consists of a Size (2 doubles) and optional position angle element";
  }

dtype smallCircleType  ""
  {   
        Pole: double2Type  @?   "smallCircleType indicates in polygons that side is along small circle; with optional pole";
  }

dtype spectralCoordinateType  -> basicCoordinateType ""
  {   
        unit: spectralUnitType  @?   "";
        coord_system_id  @?  references coordSysType "";
  }

abstract dtype stcBaseType  "STC standard base type. Elements of derived types may contain real content, be a reference to another element in the document (idref), or be a reference to a distributed resource; the href is to be a standard IVOA identifier or a valid URL. Actuation is up to the client. At this time it is required to be of type simple. An id is optional; it allows referencing by other elements.

TBD Should this be an objectType?"
  {   
        STCReference: STCReference   "Mapping of the attribute ref to STCReference.";
  }

dtype stdRefPosType  -> referencePositionType "Type for standard reference positions"
  {   
        PlanetaryEphem: planetaryEphemType  @?   "";
  }

dtype stringCoordinateType  -> coordinateType ""
  {   
        unit: ivoa:string  @?   "";
        Value: ivoa:string   "";
  }

dtype timeCoordinateType  -> coordinateType "Time coordinate type; sibling of basicCoordinateType.
Error, Resolution, Size, PixSize elements indicate definite values; pairs indicate ranges."
  {   
        TimeInstant: astronTimeType  @?   "";
        Error: double1Type @[0..2]  "";
        Resolution: double1Type @[0..2]  "";
        Size: double1Type @[0..2]  "";
        PixSize: double1Type @[0..2]  "";
        unit: timeUnitType  @?   "";
        coord_system_id  @?  references coordSysType "";
  }

dtype timeOffsetType  "Actual elapsed time offset"
  {   
        value: ivoa:real  "";
        STCReference: STCReference  @?   "";
        unit: timeUnitType  @?   "";
  }

dtype vector2CoordinateType  -> coordinateType "2-D coordinate type.
Single CError2, CResolution2, CSize2, CPixSize2 elements indicate definite values; pairs indicate ranges"
  {   
        Name1: ivoa:string  @?   "";
        Name2: ivoa:string  @?   "";
        CValue2: double2Type @[0..2]  "";
        CError2: size2DType @[2]  "";
        CResolution2: size2DType @[2]  "";
        CSize2: size2DType @[2]  "";
        CPixSize2: size2DType @[2]  "FOr convenince reuse here the size2DType, even though in model the radius is not used.";
  }

dtype vector3CoordinateType  -> coordinateType "3-D coordinate type.
Single CError3, CResolution3, CSize3, CPixSize3 elements indicate definite values; pairs indicate ranges"
  {   
        Name1: ivoa:string  @?   "";
        Name2: ivoa:string  @?   "";
        Name3: ivoa:string  @?   "";
        CValue3: double3Type @[3]  "According to substitutiongroups this might also have to be a curve3Type.
Logic of this escapes me. Wy would a coordinate be a curve?
I therefore did not try to acocmodate this in model. ";
        CError3: size3DType @[0..2]  "";
        CResolution3: size3DType @[0..2]  "";
        CSize3: size3DType @[0..2]  "";
        CPixSize3: size3DType @[0..2]  "FOr convenince reuse here the size2DType, even though in model the radius is not used.";
  }

dtype velVector1CoordinateType  -> posVector1CoordinateType "Velocity scalar coordinate type; sibling of basicCoordinateType.
Single Error, Resolution, Size, PixSize elements indicate definite values; pairs indicate ranges"
  {   
        vel_time_unit: velTimeUnitType  @?   "Velocity scalar coordinate type; sibling of basicCoordinateType
Single Error, Resolution, Size, PixSize elements indicate definite values; pairs indicate ranges";
  }

dtype velVector2CoordinateType  -> posVector2CoordinateType "Velocity 2-D coordinate type
Single CError2, CResolution2, CSize2, CPixSize2 elements indicate definite values; pairs indicate ranges"
  {   
        vel_time_unit: velTimeUnitType  @?   "Velocity scalar coordinate type; sibling of basicCoordinateType
Single Error, Resolution, Size, PixSize elements indicate definite values; pairs indicate ranges";
  }

dtype velVector3CoordinateType  -> posVector3CoordinateType "Velocity 3-D coordinate type
Single CError3, CResolution3, CSize3, CPixSize3 elements indicate definite values; pairs indicate ranges"
  {   
        vel_time_unit: velTimeUnitType  @?   "";
  }

otype allSkyType  -> shapeType "AllSky type: just a shape without any child elements"
  {   
  }

otype astroCoordSystemType  -> coordSysType "The astronomical coordinate system definition: spatial coordinate frame and reference position; time frame and reference position; the coordinate flavor; spectral frame and (optionally) Doppler frame; and the planetary ephemeris; an ID is required, since this is how coordinate elements are associated with their coordinate systems"
  {   
        TimeFrame : timeFrameType @?  as composition "";
        SpaceFrame : spaceFrameType @?  as composition "";
        SpectralFrame : spectralFrameType @?  as composition "";
        RedshiftFrame : redshiftFrameType @?  as composition "";
  }

otype astroSTCDescriptionType  "Type for generic astronomical STC metadata, in particular Resource Profile, Search Location, Catalog Entry."
  {   
  }

otype boxType  -> shapeType "Box shape: a rectangle defined by its center and size on both dimensions; since it is a polygon, it is redundant, but simple rectangles with great circle sides are awkward to define in spherical coordinates"
  {   
        Center: double2Type  @?   "";
        Size: double2Type  @?   "";
  }

otype cart1DRefFrameType  -> coordRefFrameType "A custom space reference frame type defined through a 2-D Cartesian mapping (rotate and scale).
Define coordinate reference frame from scratch;basically a 1-D scaling"
  {   
        Scale: double1Type  @?   "";
        projection: projectionType  @?   "";
  }

otype cart2DRefFrameType  -> coordRefFrameType "A custom space reference frame type defined through a 2-D Cartesian mapping (rotate and scale).
Define coordinate reference frame from scratch;Define coordinate reference frame from scratch;basically a transformation from a known coordinate frame"
  {   
        CTransform2: size2DType  @?   "NB use the size2DType to represent the various substitutiongroups that are possible for this attribute/.
see also elsewhere";
        projection: projectionType  @?   "";
  }

otype cart3DRefFrameType  -> coordRefFrameType "A custom space reference frame type defined through a 3-D Cartesian mapping (rotate and scale).
Define coordinate reference frame from scratch;basically a transformation from a known coordinate frame"
  {   
        CTransform3: size3DType  @?   "NB use the size2DType to represent the various substitutiongroups that are possible for this attribute/.
see also elsewhere";
        projection: projectionType  @?   "";
  }

otype circleType  -> shapeType "Circle shape: center and radius"
  {   
        center: double2Type  @?   "The coordinates of the circle's center";
        radius: double1Type  @?   "The radius of the circle";
  }

abstract otype combinationType  -> regionType ""
  {   
        region : unionRegion @+  as composition "";
  }

otype coordFITSColumnsType  ""
  {   
        Name: ivoa:string  @?   "";
        Value: ivoa:string  @?   "The column name for the coordinate value; comma-separated if multi-dimensional";
        Error: ivoa:string  @?   "The column name for the coordinate error; comma-separated if multi-dimensional";
        Resolution: ivoa:string  @?   "The column name for the coordinate resolution; comma-separated if multi-dimensional.

TBD SHOULD have multiplicity 1";
        Size: ivoa:string  @?   "The column name for the coordinate size; comma-separated if multi-dimensional.

TBD SHOULD have multiplicity 1";
        PixSize: ivoa:string  @?   "The column name for the coordinate pixel size; comma-separated if multi-dimensional.

TBD SHOULD have multiplicity 1";
  }

otype coordFrameType  "A CoordFrame has to have at least an Id"
  {   
        STCReference: STCReference   "";
        name: ivoa:string  @?   "";
  }

otype coordRefFrameType  "A generic CoordReferenceFrame"
  {   
        name: ivoa:string  @?   "";
  }

otype coordSysType  "Coordinate system definition: a collection of coordinate frames

TBD
Should a coordsys aggregate rather than contain frames?"
  {   
        STCReference: STCReference   "";
        CoordFrame : genericCoordinateFrameType @*  as composition "Mapping of the CoordFrame element ref and the type of that global element.";
  }

otype diffType  -> regionType ""
  {   
        Region  references regionType "";
        Region2  references regionType "";
  }

otype ellipseType  -> shapeType "Ellipse shape: center, semi-major, semi-minor axis and position angle; in spherical coordinates defined as the shape cut out of the sphere by a cone with elliptical cross-section"
  {   
        Center: double2Type  @?   "The coordinates of the ellipse's center";
        SemiMajorAxis: double1Type  @?   "";
        SemiMinorAxis: double1Type  @?   "Half the minor axis of the ellipse, in radius_unit";
        PosAngle: posAngleType  @?   "Position angle of major axis (Radius).";
  }

otype fitsType  ""
  {   
        fitsFileURL: ivoa:anyURI   "";
        hdu_num: ivoa:nonnegativeInteger  @?   "";
        hdu_name: ivoa:string  @?   "Specifies a FITS file and optionally a specific HDU by HDU number or HDU name

NB Really representys a reference to (an HDU in) a FITS file
currently modelled as a Class, as this represents a FITS file, though possibly only  HDU in a FTS file.
SHould add that structure explicitly in here and use VO-URP's referencing mechanism";
  }

otype fkType  -> spaceRefFrameType "FK[45] type: needs an equinox"
  {   
        Equinox: coordEquinoxType  @?   "";
  }

otype genericCoordinateFrameType  -> coordFrameType ""
  {   
        CoordRefPos: customRefPosType  @?   "";
        CoordFlavor: coordFlavorType  @?   "Provides the coordinate definitions: number of axes, SPHERICAL, CARTESIAN, UNITSPHERE, POLAR, or HEALPIX, presence of velocities";
        CoordRefFrame  @?  references coordRefFrameType "";
  }

otype geodType  -> icrsType "The Geodetic reference frame; semi-major axis and inverse flattening may be provided to define the reference spheroid; the default is the IAU 1976 reference spheroid"
  {   
        radius: ivoa:real  @?   "";
        inv_flattening: ivoa:real  @?   "";
        unit: posUnitType  @?   "";
  }

otype icrsType  -> spaceRefFrameType "ICRS type: no equinox"
  {   
  }

otype intersectionType  -> combinationType ""
  {   
  }

otype negationType  -> regionType ""
  {   
        region  references regionType "";
  }

otype obsLocCoordSystem  ""
  {   
        coordSys  references astroCoordSystemType "";
  }

otype observatoryLocationType  "Type for an observatory location"
  {   
        AstroCoordSystem : obsLocCoordSystem @*  as composition "";
  }

otype pixelCoordSystemType  -> coordSysType "The pixel coordinate system definition

NB Mapped the sequence with maxOccurs unbounded to a collection with multiplicity 0..*"
  {   
  }

otype pixelFrameType  -> genericCoordinateFrameType ""
  {   
        ReferencePixel: coordinateType  @?   "";
        axis1_order: ivoa:integer   "";
        axis2_order: ivoa:integer  @?   "";
        axis3_order: ivoa:integer  @?   "";
  }

otype polygonType  -> shapeType "Polygon: one or more vertices; counter-clockwise (as seen from 'inside' or from 'top') encircled area is enclosed; sides should span less than 180 deg in each coordinate if spherical; a polygon may not intersect itself"
  {   
        Vertex : vertexType @+  as composition "In order to form polygons, vertices are to be connected with straight line segments. In the case of spherical coordinates: greatcircle segments; if a smallCircle element si present, the vertex and its predecessor are to be connected with a smallcircle, by default in the CoordSys that is referenced; optionally, a pole may be specified (other than the CoordSys pole) that defines the smallcircle system";
  }

otype redshiftFrameType  -> coordFrameType "Contains the Doppler definitions, including whether the values are velocity or redshift (value_type)"
  {   
        DopplerDefinition: dopplerDefinitionType  @?   "The Doppler definition used: optical, radio, or pseudo-relativistic (i.e., how is a redshift converted to a velocity); the most common is optical, except when the reference is LSR (usually radio)";
        ReferencePosition: referencePositionType   "The Doppler definition used: optical, radio, or pseudo-relativistic (i.e., how is a redshift converted to a velocity); the most common is optical, except when the reference is LSR (usually radio)</";
        value_type: redshiftFrameValue  @?   "";
  }

otype regionType  "Abstract region type; a Region is a Shape or the result of a Region Operation involving one or more Regions

NB modelled as a class. Regions are identifiable, not to be thought of as value types. 
Someone creates a region on purpose, they do not 'just exist'."
  {   
        Area: regionAreaType  @?   "";
        note: ivoa:string  @?   "";
        coord_system_id  @?  references coordSysType "";
  }

otype sectorType  -> shapeType "A sector is the counter-clockwise area between two half-lines"
  {   
        Position: double2Type  @?   "";
        PosAngle1: posAngleType  @?   "";
        PosAngle2: posAngleType  @?   "";
  }

otype shapeType  -> regionType "is the abstract type that is the building block of regions; in real life it needs to be replaced by a concrete shape"
  {   
  }

otype spaceFrameType  -> coordFrameType ""
  {   
        ReferencePosition: referencePositionType  @?   "Mapping of the element ref to the substitutiongroup ReferencePosition.
Currently includes the genericRefPosType which is not included in substitution groups.";
        OffsetCenter: coordValueType  @?   "";
        CoordFlavor: coordFlavorType   "Provides the coordinate definitions: number of axes, SPHERICAL, CARTESIAN, UNITSPHERE, POLAR, or HEALPIX, presence of velocities";
        SpaceRefFrame  references spaceRefFrameType "Mapping of contained element of ref SpaceRefFrame substitution group.

Coordinate reference frame: optional equinox with either a standard reference system (ICRS, FK5, FK4) and optional standard pole (equatorial, ecliptic, galactic, etc.), or pole (positive Z-axis) and positive X-axis direction ";
  }

otype spaceRefFrameType  -> coordRefFrameType "Abstract space reference frame type"
  {   
        SpaceRefFrame: SpaceRefFrame  @?   "";
  }

otype spectralFrameType  -> coordFrameType "Contains the spectral frame reference position"
  {   
        ReferencePosition: referencePositionType  @?   "The reference frame for the spectral scale; note presence of LSR";
  }

otype sphericalRefFrameType  -> coordRefFrameType "custom space reference frame type defined through pole and X-axis directions
Define coordinate reference frame from scratch; pole and X-axis need to be defined in a known coordinate system

NB did not add ID attribute as this is a Class which carries an implicit identity."
  {   
        Frame: ivoa:string   "";
        Pole_Zaxis: astroCoordsType  @?   "";
        Xaxis: astroCoordsType  @?   "";
  }

otype timeFrameType  -> coordFrameType ""
  {   
        TimeScale: timeScaleType  @?   "The time reference frame consists of a time scale, a time format, and a reference time, if needed";
        ReferencePosition: referencePositionType  @?   "Origin of the coordinate reference frame: either a 'known place' such as geocenter or barycenter, or a position defined in a known coordinate system";
        TimeRefDirection: astroCoordsType  @?   "Some time transformations (e.g., change of RefPos) depend on an assumed directonal position of the source";
  }

otype unionRegion  ""
  {   
        region  references regionType "";
  }

otype unionType  -> combinationType "The union of two or more regions is a region"
  {   
  }

otype vertexType  ""
  {   
        Position: double2Type  @?   "";
        SmallCircle: smallCircleType  @?   "";
  }
