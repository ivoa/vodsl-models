
model provenance (0.1) "<Enter note text here>"
     
include "IVOA-v1.0.vodsl"  
package provenance  "The provenance package for describing provenance."
{
      
enum AgentRole  "The role that an agent takes while being responsible for something; e.g. observer, developer, operator etc."
{
Observer  "Example role for an agent, observer at the telescope",
Creator  "Example role for an agent, someone who created a dataset",
Author  "Example role for an agent, someone who wrote and article, software, proposal, ...",
Editor  "Example role for an agent, editor of e.g. an article, before publishing",
Publisher  "Example role for an agent, organization (publishing house, institution) that published something",
Operator  "Example role for an agent, someone performing a given task",
Coordinator  "Example role for an agent, someone coordinating/leading a project",
Provider  "Example role for an agent, an organization that makes data and/or services available to users over the network"
}

otype Activity  "A process or task, e.g. observation, calibration of images, stacking of images, calculation of a property, simulation of a spectrum"
  {   
        id: ivoa:string   "A unique (qualified) identifier for the activity (unique in its realm)";
        name: ivoa:string  @?   "A human-readable name (to be displayed by clients)";
        startTime: ivoa:string   "Datetime at which the activity was started";
        endTime: ivoa:string   "Datetime at which the activity ended";
        annotation: ivoa:string  @?   "Additional explanations for the specific activity instance";
        votype: ivoa:string  @?   "Used to distinguish between a simple 'activity' or an 'activityFlow'";
        used : provenance.Used @*  as composition "Link to Used class linking to the used entities; there can be many used-links, one for each used entity.";
        wasAssociatedWith : provenance.WasAssociatedWith @*  as composition "Link to a class linking to an agent that was responsible for this activity (the role he/she/it performs may be given as additional attribute in wasAssociatedWith)";
        parameter : provenance.Parameter @*  as composition "Link to a parameter of this activity";
        description  @?  references provenance.ActivityDescription "Link to the activityDescription of this activity (if existing)";
        informant  @*  references provenance.Activity "Link from an (informed) activity to a preceding activity (informant); wasInformedBy relationship";
  }

otype ActivityDescription  "A class for describing the general method underlying an activity."
  {   
        id: ivoa:string   "Unique identifier for this activityDescription (unique in its realm)";
        name: ivoa:string  @?   "A human-readable name (to be displayed by clients)";
        type: ivoa:string  @?   "A general type of the method for this activity, e.g. calibration, pipeline, ...";
        subtype: ivoa:string  @?   "A subtype describing the general method of the activity further";
        annotation: ivoa:string  @?   "Additional description text, comments, remarks, ...";
        code: ivoa:string  @?   "The code (software) used for this process, if applicable";
        version: ivoa:string  @?   "A version number, if applicable (e.g. for the code)";
        doculink: ivoa.anyURI  @?   "Link to documentation for this activityDescription";
        usedDescription : provenance.UsedDescription @*  as composition "Link to entityDescriptions, describing which kind of entity can be used with this activity-type";
        parameterDescription : provenance.ParameterDescription @*  as composition "Link to parameterDescription, describing which kind of parameter can be used with this activity-type";
  }

otype Entity  "A thing at a certain state, in astronomy typically data products like images, spectra, catalogs, log files, weather reports, ..."
  {   
        id: ivoa:string   "Unique identifier for this entity (unique in its realm)";
        name: ivoa:string  @?   "A human-readable name for this entity";
        type: ivoa:string  @?   "A provenance type (from W3C), i.e. one of: prov:collection, prov:bundle, prov:plan, prov:entity; not needed for a simple entity";
        annotation: ivoa:string  @?   "Text describing the entity in more detail";
        rights: ivoa:string  @?   "Access rights for the data, values: public, restricted or internal; can be linked to Curation.Rights from ObsCore/Dataset Metadata Model";
        creationTime: ivoa.datetime  @?   "Datetime at which the entity was created";
        wasGeneratedBy : provenance.WasGeneratedBy @*  as composition "Link to the WasGeneratedBy class linking to an activity (or activityFlow) generating this entity; if no activityFlow, there must be only one wasGeneratedBy-relation to only one generating activity";
        wasAttributedTo : provenance.WasAttributedTo @*  as composition "Link to the class that links to an agent who was responsible and gets attribution for this entity";
        description  @?  references provenance.EntityDescription "Link to the entityDescription for this entity";
        usedEntity  @*  references provenance.Entity "Link to the entity that was used in a wasDerivedFrom-relation.";
  }

otype EntityDescription  "Class for general descriptions of entities, contains properties that are known before an entity is created."
  {   
        id: ivoa:string   "Unique identitfier for this entityDescription";
        name: ivoa:string  @?   "Human-readable name for the entityDescription";
        annotation: ivoa:string  @?   "Descriptive text for this kind of entity";
        category: ivoa:string  @?   "Specifies if entities linked to this description contain information on logging, system (environment), calibration, simulation, observation, configuration, ...";
        doculink: ivoa.anyURI  @?   "Link to more documentation";
        wasGeneratedByDescription : provenance.WasGeneratedByDescription @*  as composition "Link to the wasGeneratedBy class linking to the ActivityDescription for activities that generate this type of entities";
  }

otype Used  "Class for linking activities with the input entities"
  {   
        role: ivoa:string  @?   "Role that an entity had when being used by an activity; usually only needed if no UseDescription.role is used";
        description  @?  references provenance.UsedDescription "Link to corresponding UsedDescription class (where the 'role' of an entity may be stored)";
        entity  references provenance.Entity "Link to an entity that is being used for some activity";
  }

otype WasGeneratedBy  "Class for linking entities to their generating activities"
  {   
        role: ivoa:string  @?   "Role that an entity had when being generated, e.g. 'log file', 'statistics file', 'main result'; usually needed only if no WasGeneratedByDescription.role is used";
        description  @?  references provenance.WasGeneratedByDescription "Link to corresonding wasGeneratedByDescription (which may contain further attributes like 'role')";
        activity  references provenance.Activity "Link to the activity that generated an entity";
  }

otype WasGeneratedByDescription  "Class for specifying the expected WasGeneratedBy relations for EntityDescriptions"
  {   
        role: ivoa:string  @?   "Role that an entity had when being generated, e.g. 'log file', 'statistics file', 'main result'";
        activityDescription  references provenance.ActivityDescription "Link to the activityDescription";
  }

otype Agent  "Class for individuals and organizations who/that are responsible for entities or activities"
  {   
        id: ivoa:string   "Unique identifier for an agent (unique in its realm)";
        name: ivoa:string   "A common name for this agent; e.g. first name and last name; project name, agency name, ...";
        type: ivoa:string  @?   "Type of the agent: either Individual or Organization";
        email: ivoa:string  @?   "Contact email of the agent";
        address: ivoa:string  @?   "Address of the agent";
  }

otype WasAssociatedWith  "Class for linking an activity with a responsible agent"
  {   
        role: provenance.AgentRole  @?   "Role that an agent had, e.g. operator, observers, software developer";
        agent  references provenance.Agent "Link to the agent associated with an activity";
  }

otype WasAttributedTo  "Class for linking an entity with a responsible agent"
  {   
        role: provenance.AgentRole   "Role that an agent had, e.g. publisher";
        agent  references provenance.Agent "Link to the agent who gets attribution for an entity";
  }

otype ActivityFlow  -> provenance.Activity "Class for a group of activities, it's an activity itself"
  {   
        hadStep : provenance.HadStep @*  as composition "Link to the class that links the activityFlow with its sub-activities";
  }

otype Collection  -> provenance.Entity "Class for a group of entities, it's an entity itself"
  {   
        hadMember : provenance.HadMember @*  as composition "Link to the class that links the collection with its member entities";
  }

otype HadStep  "Class for linking activityFlows with their sub-processes"
  {   
        activity  references provenance.Activity "The sub-activity of an activityFlow";
  }

otype HadMember  "Class for linking collections with their member entities"
  {   
        entity  references provenance.Entity "Entity that belongs to a collection";
  }

otype Parameter  "Class for the parameters of an activity"
  {   
        id: ivoa:string   "Unique identifier of a parameter";
        value: ivoa:string   "Value of the parameter";
        description  @?  references provenance.ParameterDescription "Link to the corresponding parameterDescription";
  }

otype ParameterDescription  "Class for describing parameters; contains everything except the actual value"
  {   
        id: ivoa:string   "Unique identifier for this parameterDescription";
        name: ivoa:string   "Name of this parameter";
        datatype: ivoa:string   "Datatype";
        unit: ivoa.Unit  @?   "Physical unit";
        ucd: ivoa:string  @?   "Unified Content Descriptor, supplying a standardized classification of the physical quantity";
        utype: ivoa:string  @?   "UType, meant to express the role of the parameter in the context of an external data model";
        annotation: ivoa:string  @?   "Additional free text description";
        min: ivoa.real  @?   "Minimum value";
        max: ivoa.real  @?   "Maximum value";
        options: ivoa:string  @*   "List of accepted values";
  }

otype UsedDescription  "Class for specifying the expected Used relations for ActivityDescriptions"
  {   
        role: ivoa:string  @?   "Role that an entity had when being used by an activity";
        entityDescription  references provenance.EntityDescription "Link to the corresponding entityDescription";
  }

}
  