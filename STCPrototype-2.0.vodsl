
model stc (2.0) "
          TODO : Missing description : please, update your UML model asap.
        "
	   author "tbd"
       include "IVOA.vodsl"
enum Handedness  ""
{
left  "",
right  ""
}

enum CoordFlavor  ""
{
spherical  "",
cartesian  "",
polar  "",
cylindrical  "",
unitsphere  "",
healpix  "",
string  "",
polarization  ""
}

enum StdSpaceRefFrame  ""
{
ICRS  "",
FK4  "",
FK5  "",
ECLIPTIC  "",
GALACTIC_I  "",
GALACTIC_II  "",
SUPER_GALACTIC  "",
AZ_EL  "",
BODY  "",
GEO_C  "",
GEO_D  "",
MAG  "",
GSE  "",
GSM  "",
SM  "",
HGC  "",
HEE  "",
HEEQ  "",
HCI  "",
HCD  "",
MERCURY_C  "",
VENUS_C  "",
LUNA_C  "",
MARS_C  "",
JUPITER_C_III  "",
SATURN_C_III  "",
URANUS_C_III  "",
NEPTUNE_C_III  "",
PLUTO_C  "",
MERCURY_G  "",
VENUS_G  "",
LUNA_G  "",
MARS_G  "",
JUPITER_G_III  "",
SATURN_G_III  "",
URANUS_G_III  "",
NEPTUNE_G_III  "",
PLUTO_G  "",
UNKNOWN  "",
CUSTOM  ""
}

enum StdRefPosition  ""
{
TOPOCENTER  "",
BARYCENTER  "",
HELIOCENTER  "",
GEOCENTER  "",
GALACTIC_CENTER  "",
LOCAL_GROUP_CENTER  "",
MOON  "",
EMBARYCENTER  "",
MERCURY  "",
VENUS  "",
MARS  "",
JUPITER  "",
SATURN  "",
URANUS  "",
NEPTUNE  "",
PLUTO  "",
RELOCATABLE  "",
LSR  "",
LSRK  "",
LSRD  "",
UNKNOWN  "",
CUSTOM  ""
}

enum EpochType  ""
{
J  "",
B  ""
}

enum TimeScale  ""
{
TT  "",
ET  "",
TDB  "",
TCG  "",
TCB  "",
TAI  "",
UTC  "",
LST  "",
LOCAL  ""
}

enum DopplerDefinition  ""
{
optical  "",
radio  "",
relativistic  "",
redshift  ""
}

enum PolarizationType  ""
{
STOKES  "",
CIRCULAR  "",
LINEAR  "",
VECTOR  ""
}

enum Projection  ""
{
LOG  "",
TAN  "",
SIN  "",
STG  "",
ARC  "",
ZEA  "",
AIR  "",
CEA  "",
CAR  "",
MER  "",
SFL  "",
PAR  "",
MOL  "",
AIT  "",
COE  "",
COD  "",
COO  "",
BON  "",
PCO  "",
TSC  "",
CSC  "",
QSC  ""
}

enum PolStokes  ""
{
I  "",
Q  "",
U  "",
V  ""
}

enum PolCircular  ""
{
RR  "",
LL  "",
RL  "",
LR  ""
}

enum PolLinear  ""
{
XX  "",
YY  "",
XY  "",
YX  ""
}

enum PolVector  ""
{
I  "",
PF  "",
PP  "",
PA  ""
}

dtype Epoch  ""
  {   
        type: EpochType   "";
        year: ivoa:decimal   "";
  }

abstract dtype Coordinate  ""
  {   
        coordinateDomain: string   "";
        frame  @?  references CoordFrame "";
  }

dtype GenericCoord 
  -> Coordinate ""
  {   
        coord: quantity.RealQuantity  @?   "";
        statError: MultiStruct  @?   "";
        sysError: MultiStruct  @?   "";
        ranError: MultiStruct  @?   "";
        resolution: MultiStruct  @?   "";
  }

abstract dtype SpatialCoord 
  -> Coordinate ""
  {   
        ndim: nonnegativeInteger   "";
        coord: QuantityVector   "";
        epoch: Epoch  @?   "";
        statError: MultiStruct  @?   "";
        sysError: MultiStruct  @?   "";
        ranError: MultiStruct  @?   "";
        resolution: MultiStruct  @?   "";
  }

dtype Position 
  -> SpatialCoord ""
  {   
  }

dtype Velocity 
  -> SpatialCoord ""
  {   
  }

dtype Time 
  -> Coordinate ""
  {   
        coord: TimeStamp  @?   "";
        statError: MultiStruct  @?   "";
        sysError: MultiStruct  @?   "";
        ranError: MultiStruct  @?   "";
        resolution: MultiStruct  @?   "";
  }

abstract dtype SpectralCoord 
  -> Coordinate ""
  {   
        coord: quantity.RealQuantity  @?   "";
        statError: MultiStruct  @?   "";
        sysError: MultiStruct  @?   "";
        ranError: MultiStruct  @?   "";
        resolution: MultiStruct  @?   "";
  }

dtype Frequency 
  -> SpectralCoord ""
  {   
  }

dtype Energy 
  -> SpectralCoord ""
  {   
  }

dtype Wavelength 
  -> SpectralCoord ""
  {   
  }

abstract dtype GenericRedshiftCoord 
  -> Coordinate ""
  {   
        coord: quantity.RealQuantity  @?   "";
        statError: MultiStruct  @?   "";
        sysError: MultiStruct  @?   "";
        ranError: MultiStruct  @?   "";
        resolution: MultiStruct  @?   "";
  }

dtype DopplerVelocity 
  -> GenericRedshiftCoord ""
  {   
  }

dtype Redshift 
  -> GenericRedshiftCoord ""
  {   
  }

abstract dtype PolarizationCoord 
  -> Coordinate ""
  {   
  }

dtype Stokes 
  -> PolarizationCoord ""
  {   
        coord: PolStokes   "";
  }

dtype Circular 
  -> PolarizationCoord ""
  {   
        coord: PolCircular   "";
  }

dtype Linear 
  -> PolarizationCoord ""
  {   
        coord: PolLinear   "";
  }

dtype Vector 
  -> PolarizationCoord ""
  {   
        coord: PolVector   "";
  }

dtype PixelCoordinate  ""
  {   
        coordinateDomain: string   "";
        naxes: nonnegativeInteger   "";
        coord: quantity.RealQuantity   "";
        frame  @?  references PixelCoordSystem "";
        coordSys  references PixelCoordSystem "";
  }

abstract dtype MultiStruct  ""
  {   
        flavor: string   "";
        ndim: nonnegativeInteger   "";
  }

dtype Symmetrical 
  -> MultiStruct ""
  {   
        radius: quantity.RealQuantity   "";
  }

dtype Asymmetrical 
  -> MultiStruct ""
  {   
        plus: quantity.RealQuantity   "";
        minus: quantity.RealQuantity   "";
  }

dtype Bounds 
  -> MultiStruct ""
  {   
        loLimit: QuantityVector   "";
        hiLimit: QuantityVector   "";
  }

dtype Box 
  -> MultiStruct ""
  {   
        boxSize: QuantityVector   "";
  }

dtype Ellipse 
  -> MultiStruct ""
  {   
        semiAxes: QuantityVector   "";
        positionAngles: QuantityVector   "";
  }

dtype MSMatrix 
  -> MultiStruct ""
  {   
        matrix: Matrix   "";
  }

dtype QualityCode  ""
  {   
        codeNum: integer   "";
        definition: string  @?   "";
  }

abstract dtype Matrix  ""
  {   
  }

dtype Matrix2x2 
  -> Matrix ""
  {   
        m11: real   "";
        m12: real   "";
        m21: real   "";
        m22: real   "";
  }

dtype Matrix3x3 
  -> Matrix ""
  {   
        m11: real   "";
        m12: real   "";
        m13: real   "";
        m21: real   "";
        m22: real   "";
        m23: real   "";
        m31: real   "";
        m32: real   "";
        m33: real   "";
  }

dtype RealScalar 
  -> QuantityVector ""
  {   
        d1: quantity.RealQuantity   "";
  }

dtype RealDoublet 
  -> QuantityVector ""
  {   
        d1: quantity.RealQuantity   "";
        d2: quantity.RealQuantity   "";
  }

dtype RealTriplet 
  -> QuantityVector ""
  {   
        d1: quantity.RealQuantity   "";
        d2: quantity.RealQuantity   "";
        d3: quantity.RealQuantity   "";
  }

abstract dtype TimeStamp  ""
  {   
  }

dtype ISOtime 
  -> TimeStamp ""
  {   
        time: datetime   "";
  }

dtype JD 
  -> TimeStamp ""
  {   
        time: real   "";
  }

dtype MJD 
  -> TimeStamp ""
  {   
        time: real   "";
  }

dtype TimeOffset 
  -> TimeStamp ""
  {   
        offset: real   "";
  }

abstract dtype SpaceRefPosition  ""
  {   
  }

dtype StdSpaceRefPos 
  -> SpaceRefPosition ""
  {   
        location: StdRefPosition   "";
  }

dtype CustomSpaceRefPos 
  -> SpaceRefPosition ""
  {   
        location: Position   "";
  }

abstract dtype QuantityVector  ""
  {   
  }

abstract otype CoordFrame  ""
  {   
        mapping : FrameTransform @*  as composition "";
  }

otype GenericFrame 
  -> CoordFrame ""
  {   
        handedness: Handedness  @?   "";
        naxes: nonnegativeInteger   "";
        flavor: CoordFlavor   "";
  }

otype SpaceFrame 
  -> CoordFrame ""
  {   
        spaceRefFrame: StdSpaceRefFrame   "";
        refPosition: SpaceRefPosition   "";
        equinox: Epoch  @?   "";
        flavor: CoordFlavor   "";
  }

otype TimeFrame 
  -> CoordFrame ""
  {   
        timeScale: TimeScale   "";
        refPosition: SpaceRefPosition   "";
        refDirection: Position  @?   "";
        time0: TimeStamp  @?   "";
  }

abstract otype SpectralLikeFrame 
  -> CoordFrame ""
  {   
        refPosition: StdRefPosition   "";
  }

otype SpectralFrame 
  -> SpectralLikeFrame ""
  {   
  }

otype RedshiftFrame 
  -> SpectralLikeFrame ""
  {   
        dopplerDefinition: DopplerDefinition   "";
  }

otype PolarizationFrame 
  -> CoordFrame ""
  {   
        polType: PolarizationType   "";
  }

otype CoordSys  ""
  {   
        genericFrame  @*  references GenericFrame "";
  }

otype AstroCoordSystem 
  -> CoordSys ""
  {   
        planetaryEphemeris: string  @?   "";
        spaceFrame  @?  references SpaceFrame "";
        timeFrame  @?  references TimeFrame "";
        spectralFrame  @?  references SpectralFrame "";
        redshiftFrame  @?  references RedshiftFrame "";
        polarizationFrame  @?  references PolarizationFrame "";
  }

otype PixelCoordSystem  ""
  {   
        handedness: Handedness  @?   "";
        pixelFrame : PixelFrame @+  as composition "";
        pixelSpace : PixelSpace as composition "";
  }

otype PixelFrame 
  -> CoordFrame ""
  {   
        nativeAxis1: nonnegativeInteger   "";
        nativeAxis2: nonnegativeInteger  @?   "";
        nativeAxis3: nonnegativeInteger  @?   "";
  }

otype PixelSpace  ""
  {   
        naxes: nonnegativeInteger   "";
        pixelAxes : PixelAxis as composition "";
  }

otype PixelAxis  ""
  {   
        axisno: nonnegativeInteger   "";
        length: nonnegativeInteger   "";
  }

otype FrameTransform  ""
  {   
        operation : Transform as composition "";
        targetFrame  references CoordFrame "";
  }

abstract otype Transform  ""
  {   
        operation : Transform @?  as composition "";
  }

otype TUnit 
  -> Transform ""
  {   
  }

otype TScale 
  -> Transform ""
  {   
        ndim: nonnegativeInteger   "";
        factor: real   "";
  }

otype TRotate 
  -> Transform ""
  {   
        ndim: nonnegativeInteger   "";
        angle: real   "";
  }

otype TMatrix 
  -> Transform ""
  {   
        matrix: Matrix   "";
  }

otype TProjection 
  -> Transform ""
  {   
        algorithm: Projection   "";
        ndim: nonnegativeInteger   "";
        nativeRefValue: real   "";
        targetRefValue: real   "";
  }

abstract otype TLookup 
  -> Transform ""
  {   
        nvals: nonnegativeInteger   "";
  }

otype TLookup1D 
  -> TLookup ""
  {   
        nativeValue1: real   "";
        targetValue1: real   "";
  }

otype TLookup2D 
  -> TLookup ""
  {   
        nativeValue1: real   "";
        nativeValue2: real   "";
        targetValue1: real   "";
        targetValue2: real   "";
  }

otype TPolarization 
  -> TLookup ""
  {   
        nativeValue1: integer   "";
  }

otype TPolStokes 
  -> TPolarization ""
  {   
        polType: PolStokes   "";
  }

otype TPolLinear 
  -> TPolarization ""
  {   
        polType: PolLinear   "";
  }

otype TPolCircular 
  -> TPolarization ""
  {   
        polType: PolCircular   "";
  }

otype TPolVector 
  -> TPolarization ""
  {   
        polType: PolVector   "";
  }

otype TPolynomial 
  -> Transform ""
  {   
        order: nonnegativeInteger   "";
        coeff: real   "";
  }

otype TShift 
  -> Transform ""
  {   
        shift: real   "";
        ndim: nonnegativeInteger   "";
  }

otype Mappings  ""
  {   
        transforms  @+  references FrameTransform "";
  }

package transform_example  ""
{
      
}
  